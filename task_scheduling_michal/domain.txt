(define (domain scheduling)
	;; (:requirements :typing :fluents :negative-preconditions) 
	(:types  task - object )

	(:predicates 
	    (achieved ?t - task)
	)

	(:functions 
	    (time)       					; what is the current time. starts at 0.
		(priority ?t - task)  			; priority of the task 
		(task-last-executed ?t - task) 	; when was the task last executed.  
	)

	(:action ACHIEVE
		:parameters(?t - task)
		:precondition (and (not (achieved ?t)))
		:effect (and
		      (achieved ?t)
			  (increase (time) 1)
			  (increase (total-cost) (* (priority ?t) (- (time) (task-last-executed ?t))))
			)
	)
)



;; ---- SOME NOTES:
;; (Achieve T1)
;; how to make sure it's 'best' ? 
;; -- achieve should 'delay' all other actions. 
;; eg:
